grammar HaskellExpressions;

@members {
  public int example;
}

expressions : expression ('\n' expression)+ EOF;

expression : e;
//precedence
e options {strategy=tokenGrab;}
  : e ('$'|'$!') e
  | e ('>>'|'>>=') e
  | e '||' <associativity=right> e 
  | e '&&' <associativity=right> e
  | e ('=='|'/='|'<'|'<='|'>='|'>') e
  | e ':' <associativity=right> e
  | e ('+'|'-') e
  | e ('*'|'/') e
  | '-' e
  | e ('^' <associativity=right>|'^^' <associativity=right>|'**' <associativity=right>) e
  | e '.' <associativity=right> e
  | NUMBER
  | BOOL
  | ID;

g options {strategy=tokenGrab;}
  : g ('.') g
  | g ('!') g
  | WORD;

NUMBER	:	('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+;
BOOL    : 'True' | 'False';
ID      : 'f'|'g'|'h';
WORD    : ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i')+;