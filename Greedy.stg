group Greedy;

header(precedences) ::= <<
grammar HaskellExpressions; //REMOVE when tree rewriting is working
@header {
import java.util.Map;
import java.util.HashMap;
}
@members {
public static final int LEFT = 1;
public static final int RIGHT = 2;
static int[] prec = new int[tokenNames.length];
static int[] uprec = new int[tokenNames.length];
static int[] postprec = new int[tokenNames.length];
static int[] assoc = new int[tokenNames.length];
static Map\<String, Integer\> tokenLiteralMap = new HashMap\<String, Integer\>();
static int lookupTokenFromGrammarString(String token) {
	return tokenLiteralMap.get(token);
}
static {
	for (int i = 0; i \< tokenNames.length; i++)
		tokenLiteralMap.put(tokenNames[i], i);
	<precedences:prec(precl=it,level=i)>
}
int nextp(int p) {
   int prevOpType = input.LA(-1);
   if ( assoc[prevOpType]==LEFT ) return prec[prevOpType]+1;
   else return prec[prevOpType];
}
}
>>

prec(precl,level) ::= <<

<precl:{p|
    <if(p.binary)>
		prec[lookupTokenFromGrammarString("<p.tokenText>")] = <level>;
    <endif>
    <if(p.unary)>
		uprec[lookupTokenFromGrammarString("<p.tokenText>")] = <level>;
    <endif>
    <if(p.rightAssoc)>
		assoc[lookupTokenFromGrammarString("<p.tokenText>")] = RIGHT;
    <else>
		assoc[lookupTokenFromGrammarString("<p.tokenText>")] = LEFT;
	<endif>
}>
>>




exprRule(name,terminals,bops,uops,buildTree) ::= <<
<name>[int p]
   :   <name>_terminals
       (   {prec[input.LA(1)]>=p}?=> (<bops;separator="|">)<if(buildTree)>^<endif> <name>[nextp(p)]

       )*
   <if(uops)>|   <if(rest(uops))>(<uops;separator="|">)<else><uops><endif><if(buildTree)>^<endif> {int q=uprec[input.LA(-1)];} <name>[q]<endif>
   ;
<name>_terminals
   :	<terminals;separator="|">;
>>