group Greedy;

staticHeader() ::= <<
public static final int LEFT = 1;
public static final int RIGHT = 2;
static java.util.Map\<String, Integer\> tokenLiteralMap = new java.util.HashMap\<String, Integer\>();
static {
	for (int i = 0; i \< tokenNames.length; i++)
		tokenLiteralMap.put(tokenNames[i], i);
}
static int lookupTokenFromGrammarString(String token) {
	return tokenLiteralMap.get(token);
}
>>

header(name, precedences) ::= <<

static int[] <name>_prec = new int[tokenNames.length];
static int[] <name>_uprec = new int[tokenNames.length];
static int[] <name>_tprec = new int[tokenNames.length];
static int[] <name>_assoc = new int[tokenNames.length];
static {
	<precedences:prec(precl=it,level=i,name=name)>
}
int <name>_nextp(int p) {
   int prevOpType = input.LA(-1);
   if ( <name>_assoc[prevOpType]==LEFT ) return <name>_prec[prevOpType]+1;
   else return <name>_prec[prevOpType];
}
>>

prec(precl,level,name) ::= <<

<precl:{p|
	<name>_<if(p.unary)>u<endif><if(p.ternary)>t<endif>prec[lookupTokenFromGrammarString("<p.safeTokenText>")] = <level>;
	<name>_assoc[lookupTokenFromGrammarString("<p.safeTokenText>")] = <if(p.rightAssoc)>RIGHT<else>LEFT<endif>;
}>
>>




exprRule(name,terminals,bops,uops,tops,buildTree) ::= <<

<name> : <name>_expr[0] ;
<name>_expr[final int p] options {strategy=precedence;}
   :   (<name>_primaries[p]) {;}
       ( options {backtrack=false; }: //to prevent our predicate from being hoisted
	    {<name>_prec[input.LA(1)]>=p}?=> (<bops;separator="|">)<if(buildTree)>^<endif> <name>_expr[<name>_nextp(p)] {;}
	     <if(first(tops))>| <tops:ternaryOp(op=it, ruleName=name, buildTree=buildTree);separator="|"> <endif>
       )*
   ;
<name>_primaries[final int p]
	:	<terminals;separator="|">
<if(uops)>	|	<if(rest(uops))>(<uops;separator="|">)<else><uops><endif><if(buildTree)>^<endif>  <name>_expr[<name>_uprec[input.LA(-1)\] ]<endif>
	;


>>

ternaryOp(op, ruleName, buildTree) ::= <<
{<name>_tprec[input.LA(1)]>=p}?=>
	<op.tokenText><if(buildTree)>^<endif> {;} <ruleName>_expr[0] <op.ternaryText><if(buildTree)>!<endif> <if(op.ternaryAfter)><ruleName>_expr[p]<endif>
>>