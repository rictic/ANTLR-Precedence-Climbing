group Greedy;

staticHeader() ::= <<
public static final int LEFT = 1;
public static final int RIGHT = 2;
static java.util.Map\<String, Integer\> tokenLiteralMap = new java.util.HashMap\<String, Integer\>();
static {
	for (int i = 0; i \< tokenNames.length; i++)
		tokenLiteralMap.put(tokenNames[i], i);
}
static int lookupTokenFromGrammarString(String token) {
	return tokenLiteralMap.get(token);
}
>>

header(name, precedences) ::= <<

static int[] <name>_prec = new int[tokenNames.length];
static int[] <name>_uprec = new int[tokenNames.length];
static int[] <name>_tprec = new int[tokenNames.length];
static int[] <name>_assoc = new int[tokenNames.length];
static {
	<precedences:prec(precl=it,level=i,name=name)>
}
int <name>_nextp(int p) {
   int prevOpType = input.LA(-1);
   if ( <name>_assoc[prevOpType]==LEFT ) return <name>_prec[prevOpType]+1;
   else return <name>_prec[prevOpType];
}
>>

prec(precl,level,name) ::= <<
<precl:{op|
<if(op.predictable)>
	<name>_<if(op.prefix)>u<endif><if(op.ternary)>t<endif>prec[lookupTokenFromGrammarString("<op.safePredictiveToken>")] = <level>;
	<name>_assoc[lookupTokenFromGrammarString("<op.safePredictiveToken>")] = <if(op.rightAssoc)>RIGHT<else>LEFT<endif>;
<endif>
}>

>>




exprRule(name,terminals,bops,pops,sops,tops,buildTree) ::= <<

<name> : <name>_expr[0] ;
<name>_expr[final int p] options {strategy=precedence;}
   :   <name>_suffix_primaries {;}        //to prevent our predicate from being hoisted
       ( options {backtrack=false; }: //also prevents hoisting
		//binary ops:
	    {<name>_prec[input.LA(1)]>=p}?=> <matcher(ops=bops,buildTree=buildTree)> <name>_expr[<name>_nextp(p)] {;}
	     <if(first(tops))>
		//ternary ops:
		| <tops:ternaryOp(op=it, ruleName=name, buildTree=buildTree);separator="
		| "> <endif>
       )*
   ;

<name>_suffix_primaries
  : <name>_primaries<if(sops)>
  //suffix ops
  (<matcher(ops=sops,buildTree=buildTree)>)*<endif>
  ;

<name>_primaries
	:	<[terminals,prefixOps(pops=pops,name=name,buildTree=buildTree)];separator="|">
	;

>>

prefixOps(pops, name, buildTree) ::= <<
<if(pops)>

  //prefix ops
  <matcher(ops=pops,buildTree=buildTree)> <name>_expr[<name>_uprec[input.LA(-1)\] ]<endif>
>>

ternaryOp(op, ruleName, buildTree) ::= <<
{<name>_tprec[input.LA(1)]>=p}?=> <op.tokenTexts><if(buildTree)>^<endif> {;} <ruleName>_expr[0] <op.ternaryOp.tokenTexts><if(buildTree)>!<endif> <if(op.ternaryAfter)><ruleName>_expr[p]<endif>
>>

matcher(ops, buildTree) ::= <<
<if(rest(ops))>(<endif><ops:{<it.tokenTexts>};separator="|"><if(rest(ops))>)<endif><if(buildTree)>^<endif>
>>